/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ksiazkakucharska;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Dagmara
 */
public class CKsiazkaKucharska extends javax.swing.JFrame {
    private static String jdbcUrl = "jdbc:mysql://localhost:3306/ksiazkadb?useSSL=false";
    /**
     * returns the connection to the database
     * @return connection to the database
     */
    public static Connection PolaczenieZBaza(){
        System.setProperty("jdbc.drivers", "com.mysql.jdbc.Driver");
        try{
            return DriverManager.getConnection(jdbcUrl, "root", "");
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
        return null;
    }
    /**
     * retrieves data from the database
     */
    public void ZaladujDane(){
        Connection polaczenie = PolaczenieZBaza();
        try{
            ResultSet zupy = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Kategoria='Zupy'");
            Zupy.removeAllItems();
            while(zupy.next()){
                Zupy.addItem(zupy.getString("tytul"));
            }
            zupy.close();
            ResultSet dg = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Kategoria='Dania Glowne'");
            DaniaGlowne.removeAllItems();
            while(dg.next()){
                DaniaGlowne.addItem(dg.getString("tytul"));
            }
            dg.close();
            ResultSet desery = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Kategoria='Desery'");
            Desery.removeAllItems();
            while(desery.next()){
                Desery.addItem(desery.getString("tytul"));
            }
            desery.close();
            ResultSet napoje = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Kategoria='Napoje'");
            Napoje.removeAllItems();
            while(napoje.next()){
                Napoje.addItem(napoje.getString("tytul"));
            }
            napoje.close();
        } catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }
    /**
     * Creates new form CKsiazkaKucharska
     */
    public CKsiazkaKucharska() {
        initComponents();
        ZaladujDane();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        Zupy = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        DaniaGlowne = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        Desery = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        Napoje = new javax.swing.JComboBox<>();
        DodajPrzepis = new javax.swing.JButton();
        WyswietlZupy = new javax.swing.JButton();
        WyswietlDaniaGlowne = new javax.swing.JButton();
        WyswietlDesery = new javax.swing.JButton();
        WyswietlNapoje = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Smacznie i zdrowo ");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);

        jLabel1.setFont(new java.awt.Font("Segoe Print", 1, 48)); // NOI18N
        jLabel1.setText("Smacznie & Zdrowo");

        jLabel3.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Zupy:");

        Zupy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Zupy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ZupyItemStateChanged(evt);
            }
        });
        Zupy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZupyActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Dania główne:");

        DaniaGlowne.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Desery:");

        Desery.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setFont(new java.awt.Font("Tempus Sans ITC", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Napoje:");

        Napoje.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        DodajPrzepis.setText("Dodaj przepis");
        DodajPrzepis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Dodajprzepis(evt);
            }
        });

        WyswietlZupy.setText("Wyświetl");
        WyswietlZupy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WyswietlZupyActionPerformed(evt);
            }
        });

        WyswietlDaniaGlowne.setText("Wyświetl");
        WyswietlDaniaGlowne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WyswietlDaniaGlowneActionPerformed(evt);
            }
        });

        WyswietlDesery.setText("Wyświetl");
        WyswietlDesery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WyswietlDeseryActionPerformed(evt);
            }
        });

        WyswietlNapoje.setText("Wyświetl");
        WyswietlNapoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WyswietlNapojeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jLabel1)
                        .addGap(0, 99, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DodajPrzepis, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(Napoje, javax.swing.GroupLayout.Alignment.LEADING, 0, 585, Short.MAX_VALUE)
                                    .addComponent(Desery, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(DaniaGlowne, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Zupy, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(WyswietlZupy)
                                    .addComponent(WyswietlDaniaGlowne)
                                    .addComponent(WyswietlDesery)
                                    .addComponent(WyswietlNapoje))
                                .addGap(22, 22, 22))
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(35, 35, 35)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(WyswietlZupy, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(Zupy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DaniaGlowne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WyswietlDaniaGlowne, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Desery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WyswietlDesery, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Napoje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WyswietlNapoje, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(DodajPrzepis)
                .addGap(74, 74, 74))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Dodajprzepis(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Dodajprzepis
             CDodawaniePrzepisu dodaj = new CDodawaniePrzepisu();
             dodaj.NewWindow();
             ZaladujDane();
    }//GEN-LAST:event_Dodajprzepis

    private void ZupyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZupyActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ZupyActionPerformed

    private void ZupyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ZupyItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_ZupyItemStateChanged
/**
 * Displaying the recipe from the soup category
 * @param evt 
 */
    private void WyswietlZupyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WyswietlZupyActionPerformed
        CPrzepis okno = new CPrzepis();
        String tytul = Zupy.getSelectedItem().toString();
        int id=0;
        String sposobWykonania="";
        List<String> skladniki = new ArrayList<String>();
        List<String> ilosci = new ArrayList<String>();
        Connection polaczenie = PolaczenieZBaza();
        try{
            ResultSet przepis = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Tytul='"+tytul+"'");
            while(przepis.next()){
               id = przepis.getInt("ID");
               sposobWykonania = przepis.getString("Tresc");
            }
            przepis.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        try{
            ResultSet skladnik = polaczenie.createStatement().executeQuery("SELECT * FROM `skladniki` WHERE PrzepID="+id+"");
            while(skladnik.next()){
               skladniki.add(skladnik.getString("Nazwa"));
               ilosci.add(skladnik.getString("Ilosc"));
            }
            skladnik.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        okno.pokazPrzepis(id, tytul, sposobWykonania, skladniki, ilosci);
        okno.setVisible(true);
        ZaladujDane();
    }//GEN-LAST:event_WyswietlZupyActionPerformed
/*
    Displaying the recipe from the main course category
    */
    private void WyswietlDaniaGlowneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WyswietlDaniaGlowneActionPerformed
CPrzepis okno = new CPrzepis();
        String tytul = DaniaGlowne.getSelectedItem().toString();
        int id=0;
        String sposobWykonania="";
        List<String> skladniki = new ArrayList<String>();
        List<String> ilosci = new ArrayList<String>();
        Connection polaczenie = PolaczenieZBaza();
        try{
            ResultSet przepis = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Tytul='"+tytul+"'");
            while(przepis.next()){
               id = przepis.getInt("ID");
               sposobWykonania = przepis.getString("Tresc");
            }
            przepis.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        try{
            ResultSet skladnik = polaczenie.createStatement().executeQuery("SELECT * FROM `skladniki` WHERE PrzepID="+id+"");
            while(skladnik.next()){
               skladniki.add(skladnik.getString("Nazwa"));
               ilosci.add(skladnik.getString("Ilosc"));
            }
            skladnik.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        okno.pokazPrzepis(id, tytul, sposobWykonania, skladniki, ilosci);
        okno.setVisible(true);
        ZaladujDane();        // TODO add your handling code here:
    }//GEN-LAST:event_WyswietlDaniaGlowneActionPerformed
/*
    Display recipe from the dessert category
    */
    private void WyswietlDeseryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WyswietlDeseryActionPerformed
CPrzepis okno = new CPrzepis();
        String tytul = Desery.getSelectedItem().toString();
        int id=0;
        String sposobWykonania="";
        List<String> skladniki = new ArrayList<String>();
        List<String> ilosci = new ArrayList<String>();
        Connection polaczenie = PolaczenieZBaza();
        try{
            ResultSet przepis = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Tytul='"+tytul+"'");
            while(przepis.next()){
               id = przepis.getInt("ID");
               sposobWykonania = przepis.getString("Tresc");
            }
            przepis.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        try{
            ResultSet skladnik = polaczenie.createStatement().executeQuery("SELECT * FROM `skladniki` WHERE PrzepID="+id+"");
            while(skladnik.next()){
               skladniki.add(skladnik.getString("Nazwa"));
               ilosci.add(skladnik.getString("Ilosc"));
            }
            skladnik.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        okno.pokazPrzepis(id, tytul, sposobWykonania, skladniki, ilosci);
        okno.setVisible(true);
        ZaladujDane();        // TODO add your handling code here:
    }//GEN-LAST:event_WyswietlDeseryActionPerformed
/*
    Displaying the recipe from the drinks category
    */
    private void WyswietlNapojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WyswietlNapojeActionPerformed
CPrzepis okno = new CPrzepis();
        String tytul = Napoje.getSelectedItem().toString();
        int id=0;
        String sposobWykonania="";
        List<String> skladniki = new ArrayList<String>();
        List<String> ilosci = new ArrayList<String>();
        Connection polaczenie = PolaczenieZBaza();
        try{
            ResultSet przepis = polaczenie.createStatement().executeQuery("SELECT * FROM `przepis` WHERE Tytul='"+tytul+"'");
            while(przepis.next()){
               id = przepis.getInt("ID");
               sposobWykonania = przepis.getString("Tresc");
            }
            przepis.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        try{
            ResultSet skladnik = polaczenie.createStatement().executeQuery("SELECT * FROM `skladniki` WHERE PrzepID="+id+"");
            while(skladnik.next()){
               skladniki.add(skladnik.getString("Nazwa"));
               ilosci.add(skladnik.getString("Ilosc"));
            }
            skladnik.close();
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
        okno.pokazPrzepis(id, tytul, sposobWykonania, skladniki, ilosci);
        okno.setVisible(true);
        ZaladujDane();        // TODO add your handling code here:
    }//GEN-LAST:event_WyswietlNapojeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CKsiazkaKucharska.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CKsiazkaKucharska.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CKsiazkaKucharska.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CKsiazkaKucharska.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CKsiazkaKucharska().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> DaniaGlowne;
    private javax.swing.JComboBox<String> Desery;
    private javax.swing.JButton DodajPrzepis;
    private javax.swing.JComboBox<String> Napoje;
    private javax.swing.JButton WyswietlDaniaGlowne;
    private javax.swing.JButton WyswietlDesery;
    private javax.swing.JButton WyswietlNapoje;
    private javax.swing.JButton WyswietlZupy;
    private javax.swing.JComboBox<String> Zupy;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
